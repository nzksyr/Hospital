{"ast":null,"code":"import { HttpClient } from \"@angular/common/http\";\nimport { Subject, forkJoin, map, switchMap } from \"rxjs\";\nimport { catchError, of } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nconst END_POINT = \"http://localhost:3000/medecins\";\nexport let CommunicationService = /*#__PURE__*/(() => {\n  class CommunicationService {\n    constructor(http) {\n      this.http = http;\n      this._listeners = new Subject();\n    }\n\n    listen() {\n      return this._listeners.asObservable();\n    }\n\n    filter(filterBy) {\n      this._listeners.next(filterBy);\n    }\n\n    getDoctors(id) {\n      console.log(id);\n      const url = id ? `${END_POINT}/${id}` : END_POINT;\n      return this.http.get(url).pipe(catchError(this.handleError('medecins')));\n    }\n\n    modifyDoctor(doctor) {\n      return this.http.put(END_POINT, doctor).pipe(catchError(this.handleError('medecins')));\n    }\n\n    modifyGreaterDoctor(doctor) {\n      return this.http.patch(END_POINT, doctor).pipe(catchError(this.handleError('medecins')));\n    }\n\n    deleteDoctor(idMedecin) {\n      const id = idMedecin;\n      return this.http.delete(`${END_POINT}/${id}`).pipe(switchMap(() => this.getDoctors(id)), switchMap(remainingDoctors => this.updateDoctorIds(remainingDoctors)), catchError(this.handleError('medecins')));\n    }\n\n    updateDoctorIds(doctors) {\n      const updateObservables = [];\n\n      for (const doctor of doctors) {\n        const updateObservable = this.modifyGreaterDoctor(doctor);\n        updateObservables.push(updateObservable);\n      }\n\n      return forkJoin(updateObservables).pipe(map(() => {}));\n    }\n\n    insertDoctor(doctor) {\n      return this.http.post(END_POINT, doctor).pipe(catchError(this.handleError('medecins')));\n    }\n\n    getService() {\n      return this.http.get(\"http://localhost:3000/Services\").pipe(catchError(this.handleError('basicGet')));\n    }\n\n    handleError(request, result) {\n      return () => of(result);\n    }\n\n  }\n\n  CommunicationService.ɵfac = function CommunicationService_Factory(t) {\n    return new (t || CommunicationService)(i0.ɵɵinject(i1.HttpClient));\n  };\n\n  CommunicationService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: CommunicationService,\n    factory: CommunicationService.ɵfac\n  });\n  return CommunicationService;\n})();","map":null,"metadata":{},"sourceType":"module"}