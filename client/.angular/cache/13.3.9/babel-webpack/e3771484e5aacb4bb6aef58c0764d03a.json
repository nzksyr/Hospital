{"ast":null,"code":"import { HttpClient } from \"@angular/common/http\";\nimport { Subject } from \"rxjs\";\nimport { catchError, of } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nconst END_POINT = \"http://localhost:3000/Medecins\";\nexport let CommunicationService = /*#__PURE__*/(() => {\n  class CommunicationService {\n    constructor(http) {\n      this.http = http;\n      this._listeners = new Subject();\n    }\n\n    listen() {\n      return this._listeners.asObservable();\n    }\n\n    filter(filterBy) {\n      this._listeners.next(filterBy);\n    }\n\n    getDoctor(idMedecin) {\n      return this.http.get(END_POINT + `/${idMedecin}`).pipe(catchError(this.handleError('basicGet')));\n    }\n\n    getAllDoctors() {\n      return this.http.get(END_POINT).pipe(catchError(this.handleError('medecins')));\n    }\n\n    modifyDoctor(doctor) {\n      return this.http.put(END_POINT, doctor).pipe(catchError(this.handleError('medecins')));\n    }\n\n    modifyGreaterDoctor(doctor) {\n      return this.http.patch(END_POINT, doctor).pipe(catchError(this.handleError('medecins')));\n    }\n    /*deleteDoctor(idMedecin: string): Observable<void> {\r\n      return this.http.delete<void>(`${END_POINT}/${idMedecin}`).pipe(\r\n         switchMap(() => this.getDoctorsWithGreaterIds(idMedecin)),\r\n         switchMap((remainingDoctors: Doctor[]) => this.updateDoctorIds(remainingDoctors)),\r\n         catchError(this.handleError<void>('medecins'))\r\n      );\r\n    }\r\n    \r\n      \r\n      /*getDoctorsWithGreaterIds(id: string): Observable<Doctor[]> {\r\n        return this.http.get<Doctor[]>(`${END_POINT}/${id}`).pipe(\r\n          catchError(this.handleError<Doctor[]>('medecins'))\r\n        );\r\n      }\r\n    \r\n      updateDoctorIds(doctors: Doctor[]): Observable<void> {\r\n        console.log(doctors)\r\n        const updateObservables: Observable<void>[] = [];\r\n      \r\n        for (const doctor of doctors) {\r\n          const updateObservable = this.modifyGreaterDoctor(doctor);\r\n          updateObservables.push(updateObservable);\r\n        }\r\n      \r\n        return forkJoin(updateObservables).pipe(\r\n          map(() => {})\r\n        );\r\n      }\r\n    */\n\n\n    insertDoctor(doctor) {\n      return this.http.post(END_POINT, doctor).pipe(catchError(this.handleError('medecins')));\n    }\n\n    getService() {\n      return this.http.get(\"http://localhost:3000/Services\").pipe(catchError(this.handleError('basicGet')));\n    }\n\n    handleError(request, result) {\n      return () => of(result);\n    }\n\n  }\n\n  CommunicationService.ɵfac = function CommunicationService_Factory(t) {\n    return new (t || CommunicationService)(i0.ɵɵinject(i1.HttpClient));\n  };\n\n  CommunicationService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: CommunicationService,\n    factory: CommunicationService.ɵfac\n  });\n  return CommunicationService;\n})();","map":null,"metadata":{},"sourceType":"module"}